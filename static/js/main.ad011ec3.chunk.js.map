{"version":3,"sources":["images/JA-logo-3.png","components/NavBar.js","components/Footer.js","pages/RecipeComponent.js","pages/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","src","Logo","alt","type","id","htmlFor","aria-hidden","href","aria-label","Footer","rel","target","RecipeComp","title","calories","image","ingredients","map","ingredient","text","parseInt","Recipes","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","a","fetch","response","json","data","hits","getRecipes","onSubmit","e","preventDefault","placeholder","value","onChange","recipe","key","label","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad011ec3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/JA-logo-3.63ae1930.png\";","import React from 'react';\r\nimport './NavBar.css';\r\nimport Logo from \"../images/JA-logo-3.png\";\r\n\r\nfunction NavBar() {\r\n    return(\r\n    <header className=\"navbar-header\">\r\n        <img className='logo' src={Logo} alt='logo'/> \r\n        <nav>\r\n          <input type='checkbox' id=\"chk\"></input>\r\n          <input type='checkbox' id=\"chk2\"></input>\r\n          <input type='checkbox' id=\"chk3\"></input>\r\n          <input type='checkbox' id=\"chk4\"></input>\r\n          <label htmlFor='chk' className='open-menu-btn'>\r\n              <i className='fa fa-bars'></i>\r\n          </label>\r\n          \r\n          <ul className=\"navbar-ul\" >\r\n            <li className=\"navbar-li\"><a htmlFor=\"chk\" aria-hidden=\"true\" href='/portfolio'>Home</a></li>\r\n            <li className=\"navbar-li\"><a htmlFor=\"chk\" aria-hidden=\"true\" href='/portfolio/#About'>About</a></li>\r\n            <li className=\"navbar-li\"><a htmlFor=\"chk\" aria-hidden=\"true\" href='/portfolio/#Projects'>Projects</a></li>\r\n            <li className=\"navbar-li\"><a htmlFor=\"chk\" aria-hidden=\"true\" href='/portfolio/#Skills'>Skills</a></li>\r\n            <li className=\"navbar-li\"><a htmlFor=\"chk\" aria-hidden=\"true\" href='/portfolio/#Contact'>Contact</a></li>\r\n            <label htmlFor=\"chk\" className=\"close-btn\" aria-label=\"Close\">\r\n              <span aria-hidden=\"true\">&times;</span>\r\n            </label>\r\n          </ul>\r\n        </nav>\r\n    </header>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => {\r\n\r\n    return(\r\n        \r\n        <footer className=\"footer\">\r\n            <link rel=\"stylesheet\" \r\n        href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\"/>\r\n            <div className=\"footer-left\">\r\n                <div className=\"icons\">\r\n                    <a className='icon' target='_blank' rel='noopener noreferrer' href=\"https://www.linkedin.com/in/jasper-angl/\"><i className=\"fa fa-linkedin\"></i></a>\r\n                    <a className='icon' target='_blank' rel='noopener noreferrer' href=\"https://github.com/jasperangl\"><i className=\"fa fa-github\"></i></a>\r\n                    <a className='icon' target='_blank' rel='noopener noreferrer' href=\"https://www.instagram.com/jasper.angl/\"><i className=\"fa fa-instagram\"></i></a>\r\n                    <a className='icon' target='_blank' rel='noopener noreferrer' href=\"https://www.facebook.com/jasper.angl\"><i className=\"fa fa-facebook\"></i></a>\r\n                </div>\r\n            </div>\r\n            <div className=\"footer-center menu\">\r\n                <div className='Contact'>\r\n                <i className=\"fa fa-map-marker menu\"></i>\r\n                <p><a  target='_blank' rel='noopener noreferrer' href=\"https://www.google.com/maps/place/10+Leon+St,+Boston,+MA+02115/@42.3367372,-71.0942511,17z/data=!3m1!4b1!4m5!3m4!1s0x89e37a2182d03a23:0xdc7950d5b25a2e4e!8m2!3d42.3367372!4d-71.0920571\">\r\n                    <span> 10 Leon Street,</span> Boston, MA, USA</a></p>\r\n                </div>\r\n                <div className='Contact'>\r\n                <i className=\"fa fa-phone menu\" ></i>\r\n                <p><a href=\"tel:6462390871\">(+1) 646 239-0871</a></p>\r\n                </div>\r\n                <div className='Contact'>\r\n                <i className=\"fa fa-envelope menu\"></i>\r\n                <p><a href=\"mailto: angl.j@northeastern.edu\"> angl.j@northeastern.com</a></p>\r\n                </div>\r\n            </div>\r\n            <div className=\"footer-right col-md-4 col-sm-6\">\r\n                <div>\r\n                    <h2> Jasper<span> Angl</span></h2>\r\n                    <p className=\"menu\">\r\n                    <a href=\"/portfolio/\"> Home </a> | \r\n                    <a href=\"/portfolio/#About\">  About </a> | \r\n                    <a href=\"/portfolio/#Projects\">  Projects </a> | \r\n                    <a href=\"/portfolio/#Skills\">  Skills </a> | \r\n                    <a href=\"/portfolio/#Contact\">  Contact </a> | \r\n                    <a target='_blank' rel='noopener noreferrer' href=\"/Resume\">Resume</a> \r\n                    \r\n                    </p>\r\n                </div>\r\n                <div>\r\n                    \r\n                </div>\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './Recipe.css';\r\n\r\n\r\n// A single recipe component inside our recipe page.\r\nconst RecipeComp = ({title,calories,image, ingredients}) => {\r\n\r\n\r\n\r\n    return(\r\n        <div className='recipe-comp'>\r\n            <div className='recipe-box'>\r\n                <h1 className='recipe-title'>{title}</h1>\r\n                <ol className='recipe-list'>\r\n                    {ingredients.map(ingredient =>(\r\n                        <li className='recipe-ingredient'>{ingredient.text}</li>\r\n                    ))}\r\n                </ol>\r\n                <p className='recipe-calories'>{parseInt(calories, 10)}kcal</p>\r\n                <img className='recipe-img' src={image} alt=\"\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecipeComp;","import React, {useEffect, useState} from 'react';\r\nimport RecipeComp from './RecipeComponent';\r\nimport './Recipe.css';\r\n\r\n// A Recipe Page\r\nconst Recipes = () => {\r\n\r\n    // Have to make these invisible when going public\r\n    const APP_ID = '7403e425';\r\n    const APP_KEY = '4d5bcb5e324134a0ee0fc9f80b1c8e76';\r\n\r\n    const [recipes, setRecipes] = useState([]);\r\n    const [search, setSearch] = useState('');\r\n    const [query, setQuery] = useState('chicken');\r\n\r\n    \r\n    useEffect( () =>{\r\n        const getRecipes = async () => {\r\n            const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\r\n            const data = await response.json(); // formats it\r\n            setRecipes(data.hits);\r\n        };\r\n        getRecipes();\r\n    }, [query]);\r\n\r\n    // gets and sets the recipes from the online resource\r\n    \r\n\r\n    // updates what we are searching for\r\n    const updateSearch = e => {\r\n        setSearch(e.target.value);\r\n    }\r\n\r\n    // fetches data only when search button is pressed\r\n    // assigns the query we are searching for ex:\"chicken\"\r\n    const getSearch = e => {\r\n        e.preventDefault();\r\n        setQuery(search)\r\n        setSearch('');\r\n    }\r\n\r\n    return(\r\n        <div className=\"recipe-App\">\r\n            <h3 className='recipe-header'>This is a search machine for any recipe you want</h3>\r\n            <form onSubmit={getSearch} className=\"search-form\">\r\n                <input type='text' className=\"search-bar\" placeholder='Your favorite recipe...' value={search} onChange={updateSearch}/>\r\n                <button className=\"search-button\" type=\"submit\">\r\n                    Search\r\n                </button>\r\n            </form>\r\n            <div className='recipes'>\r\n                {recipes.map(recipe =>(\r\n                    <RecipeComp \r\n                    key={recipe.recipe.label} \r\n                    title={recipe.recipe.label} \r\n                    calories={recipe.recipe.calories}\r\n                    image={recipe.recipe.image}\r\n                    ingredients={recipe.recipe.ingredients}/>\r\n                    \r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipes;","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport Footer from './components/Footer';\nimport Recipes from './pages/Recipe';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Recipes />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}